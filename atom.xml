<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://938650141.github.io</id>
    <title>独木舟游四海</title>
    <updated>2021-01-28T10:15:03.452Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://938650141.github.io"/>
    <link rel="self" href="https://938650141.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://938650141.github.io/images/avatar.png</logo>
    <icon>https://938650141.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 独木舟游四海</rights>
    <entry>
        <title type="html"><![CDATA[考研计算机 408 选择题模拟卷（1）复习]]></title>
        <id>https://938650141.github.io/post/kao-yan-ji-suan-ji-408-xuan-ze-ti-mo-ni-juan-1fu-xi/</id>
        <link href="https://938650141.github.io/post/kao-yan-ji-suan-ji-408-xuan-ze-ti-mo-ni-juan-1fu-xi/">
        </link>
        <updated>2021-01-28T10:13:03.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://938650141.github.io/post-images/1611828897251.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[排列组合]]></title>
        <id>https://938650141.github.io/post/pai-lie-zu-he/</id>
        <link href="https://938650141.github.io/post/pai-lie-zu-he/">
        </link>
        <updated>2020-12-02T04:42:31.000Z</updated>
        <content type="html"><![CDATA[<p>n个物品分给m个人，每人最少分1个<br>
C(n-1,m-1)，n-1个空选出m-1个即可</p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

int f[1000005];
int inv[1000005];
const int mod=998244353;

int qpow(int a,int b){
	a%=mod;
	int ans=1;
	while(b){
		if(b&amp;1) ans=((long long)ans*a)%mod;
		b&gt;&gt;=1;
		a=((long long)a*a)%mod;
	}
	return ans;
}

int main(){
	f[0]=1;
	inv[0]=1;
	for(int i=1;i&lt;=1000000;i++) f[i]=((long long)f[i-1]*i)%mod;
	for(int i=1;i&lt;=1000000;i++) inv[i]=qpow(f[i],mod-2);
	int t;
	cin&gt;&gt;t;
	while(t--){
		int n,m;
		scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
		int ans=1;
		ans=((long long)f[n-1]*inv[m-1])%mod;
		ans=((long long)ans*inv[n-m])%mod;
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p>n个物品分给m个人，允许为空<br>
则人为地填充n个物品，使其满足隔板法要求，再人为地将每个人扣除一个物品，是等价的效果<br>
C(n+m-1,m-1)</p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

int f[2000005];
int inv[2000005];
const int mod=998244353;

int qpow(int a,int b){
	a%=mod;
	int ans=1;
	while(b){
		if(b&amp;1) ans=((long long)ans*a)%mod;
		b&gt;&gt;=1;
		a=((long long)a*a)%mod;
	}
	return ans;
}

int main(){
	f[0]=1;
	inv[0]=1;
	for(int i=1;i&lt;=2000000;i++) f[i]=((long long)f[i-1]*i)%mod;
	for(int i=1;i&lt;=2000000;i++) inv[i]=qpow(f[i],mod-2);
	int t;
	cin&gt;&gt;t;
	while(t--){
		int n,m;
		scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
		int ans=1;
		ans=((long long)f[n+m-1]*inv[m-1])%mod;
		ans=((long long)ans*inv[n])%mod;
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p>n个物品，m个人，分配m个、m+1个……n个物品给m个人的方案数<br>
<img src="https://938650141.github.io/post-images/1606985887150.jpg" alt="主条目：朱世杰恒等式" loading="lazy"></p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

int f[2000005];
int inv[2000005];
const int mod=998244353;

int qpow(int a,int b){
	a%=mod;
	int ans=1;
	while(b){
		if(b&amp;1) ans=((long long)ans*a)%mod;
		b&gt;&gt;=1;
		a=((long long)a*a)%mod;
	}
	return ans;
}

int main(){
	f[0]=1;
	inv[0]=1;
	for(int i=1;i&lt;=2000000;i++) f[i]=((long long)f[i-1]*i)%mod;
	for(int i=1;i&lt;=2000000;i++) inv[i]=qpow(f[i],mod-2);
	int t;
	cin&gt;&gt;t;
	while(t--){
		int n,m;
		scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
		int ans=1;
		ans=((long long)f[n]*inv[m])%mod;
		ans=((long long)ans*inv[n-m])%mod;
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p>拿出0个或1个或2个……或n个来分给m个人<br>
同样根据上面的式子</p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

int f[2000005];
int inv[2000005];
const int mod=998244353;

int qpow(int a,int b){
	a%=mod;
	int ans=1;
	while(b){
		if(b&amp;1) ans=((long long)ans*a)%mod;
		b&gt;&gt;=1;
		a=((long long)a*a)%mod;
	}
	return ans;
}

int main(){
	f[0]=1;
	inv[0]=1;
	for(int i=1;i&lt;=2000000;i++) f[i]=((long long)f[i-1]*i)%mod;
	for(int i=1;i&lt;=2000000;i++) inv[i]=qpow(f[i],mod-2);
	int t;
	cin&gt;&gt;t;
	while(t--){
		int n,m;
		scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
		int ans=1;
		ans=((long long)f[n+m]*inv[m])%mod;
		ans=((long long)ans*inv[n])%mod;
		//ans=(ans-1+mod)%mod;
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p>n个物品分配给3个人，每个人带限制[1,a+1),[1,b+1),[1,c+1)<br>
利用容斥</p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

int f[2000005];
int inv[2000005];
const int mod=998244353;

int qpow(int a,int b){
	a%=mod;
	int ans=1;
	while(b){
		if(b&amp;1) ans=((long long)ans*a)%mod;
		b&gt;&gt;=1;
		a=((long long)a*a)%mod;
	}
	return ans;
}

int C(int a,int b){
	if(b&gt;a) return 0;
	int ans=1;
	ans=((long long)f[a]*inv[b])%mod;
	ans=((long long)ans*inv[a-b])%mod;
	return ans;
}

int main(){
	f[0]=1;
	inv[0]=1;
	for(int i=1;i&lt;=2000000;i++) f[i]=((long long)f[i-1]*i)%mod;
	for(int i=1;i&lt;=2000000;i++) inv[i]=qpow(f[i],mod-2);
	int t;
	cin&gt;&gt;t;
	while(t--){
		int n,a,b,c;
		scanf(&quot;%d%d%d%d&quot;,&amp;n,&amp;a,&amp;b,&amp;c);
		int ans=0;
		ans=(ans+C(n-1,2))%mod;
		ans=(ans-C(n-a-1,2))%mod;
		ans=(ans-C(n-b-1,2))%mod;
		ans=(ans-C(n-c-1,2))%mod;
		ans=(ans+C(n-a-b-1,2))%mod;
		ans=(ans+C(n-a-c-1,2))%mod;
		ans=(ans+C(n-b-c-1,2))%mod;
		ans=(ans-C(n-a-b-c-1,2))%mod;
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p>n个物品分配给3个人，限制[0,a+1),[0,b+1),[0,c+1)</p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

int f[2000005];
int inv[2000005];
const int mod=998244353;

int qpow(int a,int b){
	a%=mod;
	int ans=1;
	while(b){
		if(b&amp;1) ans=((long long)ans*a)%mod;
		b&gt;&gt;=1;
		a=((long long)a*a)%mod;
	}
	return ans;
}

int C(int a,int b){
	if(b&gt;a) return 0;
	int ans=1;
	ans=((long long)f[a]*inv[b])%mod;
	ans=((long long)ans*inv[a-b])%mod;
	return ans;
}

int main(){
	f[0]=1;
	inv[0]=1;
	for(int i=1;i&lt;=2000000;i++) f[i]=((long long)f[i-1]*i)%mod;
	for(int i=1;i&lt;=2000000;i++) inv[i]=qpow(f[i],mod-2);
	int t;
	cin&gt;&gt;t;
	while(t--){
		int n,a,b,c;
		scanf(&quot;%d%d%d%d&quot;,&amp;n,&amp;a,&amp;b,&amp;c);
		int ans=0;
		ans=(ans+C(n+3-1,2))%mod;
		ans=(ans-C(n-a-1+3-1,2)+mod)%mod;
		ans=(ans-C(n-b-1+3-1,2)+mod)%mod;
		ans=(ans-C(n-c-1+3-1,2)+mod)%mod;
		ans=(ans+C(n-a-1-b-1+3-1,2))%mod;
		ans=(ans+C(n-a-1-c-1+3-1,2))%mod;
		ans=(ans+C(n-b-1-c-1+3-1,2))%mod;
		ans=(ans-C(n-a-1-b-1-c-1+3-1,2)+mod)%mod;
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p>n个物品，3个人，每次拿出3~n个物品分给每个人，限制限制[1,a+1),[1,b+1),[1,c+1)</p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

int f[2000005];
int inv[2000005];
const int mod=998244353;

int qpow(int a,int b){
	a%=mod;
	int ans=1;
	while(b){
		if(b&amp;1) ans=((long long)ans*a)%mod;
		b&gt;&gt;=1;
		a=((long long)a*a)%mod;
	}
	return ans;
}

int C(int a,int b){
	if(b&gt;a) return 0;
	int ans=1;
	ans=((long long)f[a]*inv[b])%mod;
	ans=((long long)ans*inv[a-b])%mod;
	return ans;
}

int main(){
	f[0]=1;
	inv[0]=1;
	for(int i=1;i&lt;=2000000;i++) f[i]=((long long)f[i-1]*i)%mod;
	for(int i=1;i&lt;=2000000;i++) inv[i]=qpow(f[i],mod-2);
	int t;
	cin&gt;&gt;t;
	while(t--){
		int n,a,b,c;
		scanf(&quot;%d%d%d%d&quot;,&amp;n,&amp;a,&amp;b,&amp;c);
		int ans=0;
		ans=(ans+C(n,3))%mod;
		ans=(ans-C(n-a,3)+mod)%mod;
		ans=(ans-C(n-b,3)+mod)%mod;
		ans=(ans-C(n-c,3)+mod)%mod;
		ans=(ans+C(n-a-b,3))%mod;
		ans=(ans+C(n-a-c,3))%mod;
		ans=(ans+C(n-b-c,3))%mod;
		ans=(ans-C(n-a-b-c,3)+mod)%mod;
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p>n个物品，3个人，每次拿出3~n个物品分给每个人，限制限制[0,a+1),[0,b+1),[0,c+1)</p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

int f[2000005];
int inv[2000005];
const int mod=998244353;

int qpow(int a,int b){
	a%=mod;
	int ans=1;
	while(b){
		if(b&amp;1) ans=((long long)ans*a)%mod;
		b&gt;&gt;=1;
		a=((long long)a*a)%mod;
	}
	return ans;
}

int C(int a,int b){
	if(b&gt;a) return 0;
	int ans=1;
	ans=((long long)f[a]*inv[b])%mod;
	ans=((long long)ans*inv[a-b])%mod;
	return ans;
}

int main(){
	f[0]=1;
	inv[0]=1;
	for(int i=1;i&lt;=2000000;i++) f[i]=((long long)f[i-1]*i)%mod;
	for(int i=1;i&lt;=2000000;i++) inv[i]=qpow(f[i],mod-2);
	int t;
	cin&gt;&gt;t;
	while(t--){
		int n,a,b,c;
		scanf(&quot;%d%d%d%d&quot;,&amp;n,&amp;a,&amp;b,&amp;c);
		int ans=0;
		ans=(ans+C(n+3,3))%mod;
		ans=(ans-C(n-a-1+3,3)+mod)%mod;
		ans=(ans-C(n-b-1+3,3)+mod)%mod;
		ans=(ans-C(n-c-1+3,3)+mod)%mod;
		ans=(ans+C(n-a-1-b-1+3,3))%mod;
		ans=(ans+C(n-a-1-c-1+3,3))%mod;
		ans=(ans+C(n-b-1-c-1+3,3))%mod;
		ans=(ans-C(n-a-1-b-1-c-1+3,3)+mod)%mod;
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p>n个物品m个人，每人至少分1个至多分a个</p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

int f[2000005];
int inv[2000005];
const int mod=998244353;

int qpow(int a,int b){
	a%=mod;
	int ans=1;
	while(b){
		if(b&amp;1) ans=((long long)ans*a)%mod;
		b&gt;&gt;=1;
		a=((long long)a*a)%mod;
	}
	return ans;
}

long long C(long long a,long long b){
	if(b&gt;a || a&lt;0 || b&lt;0) return 0;
	long long ans;
	ans=((long long)f[a]*inv[b])%mod;
	ans=(ans*inv[a-b])%mod;
	return ans;
}

int main(){
	f[0]=1;
	inv[0]=1;
	for(int i=1;i&lt;=2000000;i++) f[i]=((long long)f[i-1]*i)%mod;
	for(int i=1;i&lt;=2000000;i++) inv[i]=qpow(f[i],mod-2);
	int t;
	cin&gt;&gt;t;
	while(t--){
		long long n,m,a;
		scanf(&quot;%lld%lld%lld&quot;,&amp;n,&amp;m,&amp;a);
		long long ans=0;
		long long sig=-1;
		for(int i=0;i&lt;=m;i++){
			sig=-sig;
			ans=(ans+(sig*((C(m,i)*C(n-i*a-1,m-1))%mod)+mod)%mod)%mod;
		}
		printf(&quot;%lld\n&quot;,ans);
	}
	return 0;
}
</code></pre>
<p>n个物品,m个人，第i个人至少分i个物品。<br>
物品数量1e9，需要分段打表<br>
每1000000个作为一段，先找到某一段的起始点存下来直接查表后再从该起点开始计算即可。</p>
<pre><code>#include&lt;bits/stdc++.h&gt;
using namespace std;

int f[2000005];
int inv[2000005];
int base[]={1,595392237,994098667,364699203,568578178,353555276,493983122,906718537,121127074,909014738,945896249,342399609,790120527,147253931,67264528,790714464,189532209,833738102,931626412,151863245,826994544,481093241,932212199,731187718,767796707,605638460,958695288,771291337,590085129,446480069,147972654,350136354,373694116,227237896,97514572,140068258,53133250,845289612,72954666,36877369,718271290,449456491,379246062,817276949,534271093,384445058,389084505,867959402,952145269,958877809,311054462,412426956,844279367,740083353,416456072,118457308,416329418,142048503,643654954,643951383,848172652,791853697,520007859,878967378,762841202,570305432,713917629,11692343,205846393,905147505,487479281,972125219,678016718,484746409,350309690,695700125,713970818,583720832,126424592,25713030,181218541,82188970,989697798,602326140,459677495,59807900,689138366,44957896,888819701,800005439,225032295,624211688,547511989,196954736,199119222,306295040,910980912,474605685,84623561,963825048,464016596,953756759,536600821,881161978,184568840,906328577,82034877,943074294,830724750,688870120,303879624,213840689,570227860,914456594,368538553,140809956,220748012,744155485,852101189,611264038,711595889,792814350,975294274,848600022,343924424,314335513,465367007,176980096,361199635,208713699,801978400,451768574,300105126,862344307,125513337,768082522,322916689,809611624,277541931,630852905,274311861,187673498,539880032,311717293,472449704,653242584,498068555,252296198,363821284,742302802,262505243,61466981,423276274,872503756,247799911,116138354,383733698,425387704,13084878,533446507,197661226,524712423,228313145,33526971,802055000,27654656,863102494,562080061,16014076,794297633,560969645,419973417,77884032,437172123,297193207,99282379,234484360,263675940,126078806,402256206,59654808,432633334,325399309,809276166,357087064,921613763,526694283,316138501,678750759,746036991,844084429,182773758,171987279,186981318,226494117,697926519,501264723,174203892,979944216,838454217,63299249,446954988,973678486,22468573,797563226,73974893,7811805,141549107,648758305,551877892,656698209,14577434,648537396,321672967,490582127,402544298,383677592,222602878,335207692,192440082,745706197,624113557,123808157,34041106,153359445,291330079,472937961,306641884,230002032,17620570,782663844,648326974,40641926,919496066,156812438,216776143,771982491,293156514,108393392,647247774,722450722,828756035,296777468,292267840,113800523,848869015,536983436,606989542,139244082,615719226,437503635,793559065,89411865,731975481,916663471,303118346,802766503,815443393,825125398,103129214,974490943,187537789,317640466,991859661,353447868,48936855,29690011,794847444,463865,980160470,756414660,658969388,480314263,754477681,969920264,234792522,950393370,9447745,219942453,896955380,100919583,961268059,257469327,256874276,602365627,332446515,820649009,852123798,931366341,363907999,567153381,829287382,316346223,204961939,892519996,200218172,409447584,413759816,511398700,525424686,434731971,201655127,527555374,534794906,673507495,856245130,774101120,316483089,456128068,304654619,992060846,895759186,535475656,391328370,570367126,433478530,461728255,603820946,848514617,938410313,397327632,781599555,387140465,325988071,983792111,831072860,274348231,244781184,557916799,495793161,588176542,707818671,399615775,396614675,970475852,617930862,142739589,481058302,72381331,733049039,152285902,620495701,211702428,292557494,754934951,448280657,937708104,114944122,403777490,234007857,561146832,331194565,187621296,831153252,266665958,112619512,495003569,314735447,993669991,166588036,410851918,378056607,938214670,875914014,509839345,908559433,199330441,49979382,36988609,111999291,739984378,543681812,751797733,219169756,926165187,965929333,192013508,124287897,744235249,214142835,631617451,607439447,36894593,114499232,987645276,107847633,600387283,155188867,413413086,591533181,918814530,830813489,729210384,205051208,444664579,814708615,54373694,893137468,462169319,86850668,55395755,533476316,492646207,226225078,901380105,789027050,177181362,968738480,305676848,639555094,984167498,685479246,221841167,592384146,230433631,555498231,420397116,697327970,46120170,210986816,880949811,975742763,329617586,597332621,55112303,292856026,814595319,17505696,483002713,396971174,904643816,768219428,256284681,152997554,596845812,44432164,630791386,754488680,506741102,920451383,713793642,426508708,632541790,783981500,590850286,141366782,527699907,822616858,344354411,61669915,44666331,954114587,160369717,924245234,887359392,636881588,153741665,189035156,821628333,517544552,712775427,417098537,460892316,557654999,450746749,131822321,583409364,284898500,59972237,376745393,443688906,586798088,66114037,781232294,465856500,824502125,324523678,504497384,401826176,551318162,488198727,18062959,576088832,336329877,388353305,133376514,604434514,250436000,115227070,249909750,374504494,723812318,365320562,55028369,734795127,10297859,372761109,694638249,83989185,539182349,15814281,51128986,779724202,2316419,728360831,19763134,886768819,16531010,367140027,910158745,809754637,431204028,809872091,507143038,611973586,498284694,128965735,190884132,867295530,187957506,581403016,218215230,641795957,783681839,205848961,550668434,317343290,18537853,568791889,312146958,931134979,496041138,706649849,413599989,541140074,901017129,134917425,370928963,51552071,973730060,415434801,853819639,245567895,774482725,324993538,562216456,173600178,196955863,571957460,859557027,733417940,872992467,438241014,584325580,626308021,677428365,619727706,108646702,106873343,222985154,522329741,236067460,234993577,96915194,598303963,947968222,79192481,499192702,671902371,57627377,396654552,238290506,698968535,565719861,912077970,222633276,317855167,879270128,779281316,955106365,691138193,308501832,705116133,80804698,448274648,847238837,520429741,557547885,94096283,497936103,924037483,939432873,57780840,760085361,384575346,75784802,824151635,29501741,379498076,778852431,565294571,556952741,975088906,508647871,386440005,657590261,516827714,166179375,347645094,646791668,647279052,330524184,254602615,680643418,120278192,311672806,3419365,528266191,668433402,869010361,93888746,874764664,7678883,595828102,57261570,639380383,476079227,825433822,67314075,558200771,491863506,975190854,329289831,115085876,899090728,770171766,733423427,885411040,480959252,812588784,860288574,286559442,99042494,257048195,667673747,446642320,23426726,263781585,482321203,808698759,933267285,571158203,931650100,948732229,214316593,419100884,551572735,25545413,346054244,522774276,420593226,830119981,704867943,808652500,873443503,271941489,45004197,946541714,942010031,58788813,601485588,889162335,629629777,942066355,69680317,590458601,28415574,630884829,366933511,211402977,643768503,256301973,750822365,190901055,964782071,474044896,811223744,602838712,103215692,867156301,139726730,776840567,34257564,334413933,100841599,742905800,211983919,814705811,898907822,552939281,293833759,605216439,533706271,287490492,398448421,624299070,743951081,170411789,80606745,503624390,963402916,389692312,813390763,739515297,184376222,827065538,837221562,321295324,327597778,892731887,983736712,492798473,35984619,793708555,326086492,404364827,451702921,482632581,542573191,81652622,496456348,800081529,365229403,440120940,541283515,589831663,836513171,1622617,699711706,9822392,270369543,48502767,483818821,807306658,940195863,996802989,335498204,351302711,976125219,946799877,205793557,617335930,263016216,700471076,418289169,182905451,607010941,390184940,94136116,31679432,946545391,809891733,969973383,892136591,631298019,366867646,477362882,920685404,213289765,531334242,54554286,422615203,525372095,656468235,905676076,32225043,20265962,380486949,115141105,27242809,827540230,888356568,204724891,63636020,198164769,608600317,664039496,151223236,52175584,529818930,533325452,975804881,22859440,591906248,157158652,546572665,572396411,77285142,519470403,293988261,851627080,359416799,128854789,390105487,334196221,961139032,576755576,769092767,765332191,611040608,695240733,172879869,783994344,175402510,705142949,713972251,673925638,856907379,110202669,667250514,872441336,712476943,970085043,59198404,872316337,29604923,183874646,504806164,902310614,554327038,641905269,52061896,902200540,395872459,988111741,768505655,473627888,804695792,55347567,710946704,107293455,92200509,704829749,743343740,241780062,179458641,346163421,774005945,86267265,224283483,814887934,31123382,363309393,343021423,383938420,872523550,618586545,700288922,788490304,634936943,659546511,484554681,102530791,276464068,207521663,954340220,814858862,870757766,748435096,328536851,435069442,571887249,231026552,245087300,762391974,357151315,679385907,412917909,827211507,509717055,36312125,914806434,895628093,898484288,846605255,99876908,336853372,434699551,811027687,46877701,691840784,146433951,838191932,47148225,635728168,543329324,410255605,348561090,721576925,247694661,130777589,189684562,177693062,52290606,319328025,169326224,336263817,462250787,55202532,254949596,586041601,183721437,641794349,468267168,642753409,73501047,288998311,282501541,557408127,210177896,696055209,876411538,650287689,495452371,47816836,994758950,78276683,992027086,172330480,831774842,627965301,194786127,393313795,126452951,18783119,737013685,527689467,196339666,448659958,362583102,914253051,917575025,267644388,43344897,106852423,748022413,270862077,3180391,143673177,302944738,159075500,86074777,556910829,37844673,352544729,134136040,3833015,723939606,635470843,690636846,818001905,583087706,144748417,600846731,324917882,318644096,621611555,240286626,330730430,102463110,839514995,656215179,241972476,283521826,874936737,957091307,861277421,488484366,700680708,588885096,613224734,155777384,4060373,555779120,733506432,779114281,562668889,37746662,876240334,986766124,923597279,422941353,68201608,380597528,647180359,521561067,30193991,633380145,268768862};
const int mod=998244353;

long long qpow(long long a,long long b){
	a%=mod;
	long long ans=1;
	while(b){
		if(b&amp;1) ans=((long long)ans*a)%mod;
		b&gt;&gt;=1;
		a=((long long)a*a)%mod;
	}
	return ans;
}

long long fec(long long a){
	long long pos=a/1000000;
	long long bg=pos*1000000;
	long long ans=base[pos];
	for(long long i=bg+1;i&lt;=a;i++){
		ans=(ans*i)%mod;
	}
	return ans;
}

long long invc(long long a){
	return qpow(fec(a),mod-2);
}

long long C(long long a,long long b){
	if(b&gt;a || a&lt;0 || b&lt;0) return 0;
	long long ans;
	ans=(fec(a)*invc(b))%mod;
	ans=(ans*invc(a-b))%mod;
	return ans;
}

int main(){
	int t;
	cin&gt;&gt;t;
	while(t--){
		long long n,m;
		scanf(&quot;%lld%lld&quot;,&amp;n,&amp;m);
		for(int i=1;i&lt;=m;i++) n-=i;
		printf(&quot;%lld\n&quot;,C(n+m-1,m-1));
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mobius函数]]></title>
        <id>https://938650141.github.io/post/mobius-han-shu/</id>
        <link href="https://938650141.github.io/post/mobius-han-shu/">
        </link>
        <updated>2020-11-30T02:44:14.000Z</updated>
        <content type="html"><![CDATA[<pre><code>//Mobius函数求解代码
for(int i=1;i&lt;=n;i++) miu[i]=1,v[i]=0;
    for(int i=2;i&lt;=n;i++){
        if(v[i]) continue;
        miu[i]=-1;
        for(int j=2*i;j&lt;=n;j+=i){
            v[j]=1;
            if((j/i)%i==0) miu[j]=0;
            else miu[j]*=-1;
        }
    }
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://938650141.github.io/post-images/1606704338830.jpg" alt="例题" loading="lazy"></figure>
<pre><code>#include&lt;cstdio&gt;
using namespace std;
const int N=(int)1e6+5;
int n;
int miu[N];
int v[N];

long long f(int x){
    int ans=0;
    while(x){
        ans+=x%10;
        x/=10;
    }
    return ans;
}

long long g(int x){
    int ans=1;
    while(x){
        ans*=x%10;
        x/=10;
    }
    return ans;
}

int main(){
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++) miu[i]=1,v[i]=0;
    for(int i=2;i&lt;=n;i++){
        if(v[i]) continue;
        miu[i]=-1;
        for(int j=2*i;j&lt;=n;j+=i){
            v[j]=1;
            if((j/i)%i==0) miu[j]=0;
            else miu[j]*=-1;
        }
    }
    long long ans=0;
    for(int i=1;i&lt;=n;i++){
        for(int j=i;j&lt;=n;j+=i){
            ans+=(long long)miu[i]*(n/i-j/i+1)*g(j);
            ans+=(long long)miu[i]*(j/i)*f(j);
        }
    }
    printf(&quot;%lld&quot;,ans);
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codeforces Round #684 (Div. 2)]]></title>
        <id>https://938650141.github.io/post/codeforces-round-684-div-2/</id>
        <link href="https://938650141.github.io/post/codeforces-round-684-div-2/">
        </link>
        <updated>2020-11-18T12:55:54.000Z</updated>
        <content type="html"><![CDATA[<p>A.</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;

int main(){
    int t;
    cin&gt;&gt;t;
    while(t--){
        int n,c0,c1,h;
        string s;
        cin&gt;&gt;n&gt;&gt;c0&gt;&gt;c1&gt;&gt;h&gt;&gt;s;
        int ans=0;
        for(int i=0;i&lt;s.size();i++){
            if(s[i]=='0') ans+=min(c0,c1+h);
            else ans+=min(c1,c0+h);
        }
        cout&lt;&lt;ans&lt;&lt;&quot;\n&quot;;
    }
    return 0;
}
</code></pre>
<p>B.</p>
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;algorithm&gt;
using namespace std;
int a[200005];

int main(){
    int t;
    cin&gt;&gt;t;
    while(t--){
        int n,k;
        cin&gt;&gt;n&gt;&gt;k;
        for(int i=1;i&lt;=n*k;i++){
            scanf(&quot;%d&quot;,&amp;a[i]);
        }
        sort(a+1,a+n*k+1);
        reverse(a+1,a+n*k+1);
        int m=n-(n+1)/2+1;
        long long ans=0;
        for(int i=m,j=1;j&lt;=k;i+=m,j++) ans+=a[i];
        cout&lt;&lt;ans&lt;&lt;&quot;\n&quot;;
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[计算机网络]HTTP学习笔记]]></title>
        <id>https://938650141.github.io/post/ji-suan-ji-wang-luo-http-xue-xi-bi-ji/</id>
        <link href="https://938650141.github.io/post/ji-suan-ji-wang-luo-http-xue-xi-bi-ji/">
        </link>
        <updated>2020-10-31T07:56:15.000Z</updated>
        <content type="html"><![CDATA[<p>每一项技术从无到有，逐渐发展的过程需要用历史的眼光去看待。<br>
最开始的互联网一开始的设想是让远隔两地的人能够相互分享知识，构成WWW，于是有几个最关键的东西就需要确定下来。</p>
<ul>
<li>内容的格式</li>
<li>传输的协议</li>
<li>资源的定位</li>
</ul>
<p>这三个东西我们可以从两个人的邮件互通开始看起，两个人想要写邮件互相交流，那就必须知道对方家庭所在地址，这样邮件才能寄到对方的手中，但是仅此并不够，还需要交给指定的通路去寄邮件。如同邮政快递属于社会基础服务一般，我们现在的网路通信，一样是基础的设施，在基础的设施好之后，我们就规定设施的服务按照某一规则来，这就是协议。但是双方通信还需要一致的交流格式及其语言，否则就可能看不懂，这就需要规定内容的格式。<br>
以上三样基本构成了交流通信的关键。</p>
<p>我们先从传输的协议看起，这是传输信息中最重要的，也可以说一封邮件的传输，失败的可能性最大应在传输的过程中。</p>
<p>这个我们就要从计算机网络的模型开始讨论起，但是过于底层的内容应当放在后面，所以我们先从当今网络最重要的网络协议TCP/IP讲起。</p>
<blockquote>
<p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如， 如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通 信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之 间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为 协议（protocol）。</p>
</blockquote>
<p>应用层是应用程序层面。<br>
传输层是交付应用程序数据的控制层面。<br>
网络层是在逻辑上划分数据单元并进行传递的结构层面。<br>
链路层是在物理上规定各个结点的硬件是如何进行数据交换的硬件层面。</p>
<p>每一层向下传递则增加首尾部，进行封装。<br>
反之，亦然。</p>
<blockquote>
<p>IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方 那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC 地址（Media Access Control Address）。 IP 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定 地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC 地址基本上不会更改。</p>
</blockquote>
<blockquote>
<p>使用 ARP 协议凭借 MAC 地址进行通信 IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网 （LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转 才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 ARP 协议（Address Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方 的 IP 地址就可以反查出对应的 MAC 地址。</p>
</blockquote>
<blockquote>
<p>这种机制称为路由选择（routing），有点像快递公司的送货过程。想 要寄快递的人，只要将自己的货物送到集散中心，就可以知道快递公 司是否肯收件发货，该快递公司的集散中心检查货物的送达地址，明 确下站该送往哪个区域的集散中心。接着，那个区域的集散中心自会 判断是否能送到对方的家中。</p>
</blockquote>
<p>因为IP协议不提供可靠的传输，所以需要TCP来进行控制，确保信息的通信正常。</p>
<blockquote>
<p>TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够 确认数据最终是否送达到对方。</p>
</blockquote>
<p>通过打招呼的方式，A和B的交流通信要从hello开始一样，A询问B，你能听到我说话吗，B回答能，那你能听到我说话吗，A回答能，之后AB可以进行正常的交流了。<br>
在TCP中就是三次握手，通过SYN进行询问，ACK应答确认。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[LeetCode周赛]第207场周赛]]></title>
        <id>https://938650141.github.io/post/leetcode-zhou-sai-di-207-chang-zhou-sai/</id>
        <link href="https://938650141.github.io/post/leetcode-zhou-sai-di-207-chang-zhou-sai/">
        </link>
        <updated>2020-09-20T06:30:30.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/contest/weekly-contest-207/problems/rearrange-spaces-between-words/">5519. 重新排列单词间的空格</a><br>
略</p>
<p><a href="https://leetcode-cn.com/problems/split-a-string-into-the-max-number-of-unique-substrings/">5520. 拆分字符串使唯一子字符串的数目最大</a></p>
<p>优化暴力，暴力循环分割位置的集合，检查是否合法，逆向循环进行优化；</p>
<pre><code>class Solution {
public:
    set&lt;string&gt;mp;
    int maxUniqueSplit(string s) {
        int n=s.size()-1;
        int ans=1;
        for(int i=(1&lt;&lt;n)-1;i&gt;=1;i--){
            int k=0;
            for(int j=0;j&lt;=n+1;j++) if((i&gt;&gt;j)&amp;1) k++;
            k++;
            if(k&lt;=ans) continue;
            mp.clear();
            string now;
            int tmp=0;
            bool flag=true;
            for(int j=0;j&lt;s.size();j++){
                now+=s[j];
                if((i&gt;&gt;j)&amp;1){
                    if(mp.find(now)==mp.end()) mp.insert(now),now.clear(),tmp++;
                    else{
                        flag=false;
                        break;
                    }
                }
            }
            if(!flag) continue;
            if(mp.find(now)==mp.end()) mp.insert(now);
            else continue;
            tmp++;
            ans=max(ans,tmp);
        }
        return ans;
    }
};
</code></pre>
<p><a href="https://leetcode-cn.com/problems/maximum-non-negative-product-in-a-matrix/">5521. 矩阵的最大非负积</a></p>
<p>二维dp，注意边界</p>
<pre><code>class Solution {
public:
    long long dp[20][20][2];
    int maxProductPath(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {
        int mod=(int)1e9+7;
        int n=grid.size();
        int m=grid[0].size();
        dp[0][1][0]=1;
        dp[0][1][1]=1;
        dp[1][0][0]=1;
        dp[1][0][1]=1;
        for(int i=0;i&lt;n;i++){
            for(int j=0;j&lt;m;j++){
                i++,j++;
                if(i!=1 &amp;&amp; j!=1){
                    dp[i][j][0]=max(max(dp[i][j-1][1]*grid[i-1][j-1],dp[i][j-1][0]*grid[i-1][j-1]),max(dp[i-1][j][1]*grid[i-1][j-1],dp[i-1][j][0]*grid[i-1][j-1]));
                dp[i][j][1]=min(min(dp[i][j-1][1]*grid[i-1][j-1],dp[i][j-1][0]*grid[i-1][j-1]),min(dp[i-1][j][1]*grid[i-1][j-1],dp[i-1][j][0]*grid[i-1][j-1]));
                }else if(i==1){
                    dp[i][j][0]=max(dp[i][j-1][1]*grid[i-1][j-1],dp[i][j-1][0]*grid[i-1][j-1]);
                    dp[i][j][1]=min(dp[i][j-1][1]*grid[i-1][j-1],dp[i][j-1][0]*grid[i-1][j-1]);
                }else{
                    dp[i][j][0]=max(dp[i-1][j][1]*grid[i-1][j-1],dp[i-1][j][0]*grid[i-1][j-1]);
                    dp[i][j][1]=min(dp[i-1][j][1]*grid[i-1][j-1],dp[i-1][j][0]*grid[i-1][j-1]);
                }
                
                i--,j--;
            }
        }
        return dp[n][m][0]&lt;0?-1:(dp[n][m][0]%mod);
    }
};
</code></pre>
<p><a href="https://leetcode-cn.com/problems/minimum-cost-to-connect-two-groups-of-points/">5522. 连通两组点的最小成本</a></p>
<p>参考<a href="https://cp-wiki.vercel.app/tutorial/leetcode/WC207/#problem-d-%E8%BF%9E%E9%80%9A%E4%B8%A4%E7%BB%84%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC">lucifer1004的题解</a></p>
<pre><code>const int INF = 0x3f3f3f3f;

class Solution {
public:
    int connectTwoGroups(vector&lt;vector&lt;int&gt;&gt;&amp; cost) {
        int n = cost.size(), m = cost[0].size();
        vector&lt;int&gt; dp(1 &lt;&lt; m, INF);
        dp[0] = 0;
        for (int i = 0; i &lt; n; ++i) {
            vector&lt;int&gt; ndp(1 &lt;&lt; m, INF);
            for (int last = 0; last &lt; (1 &lt;&lt; m); ++last) {
                if (dp[last] == INF)
                    continue;
                for (int j = 0; j &lt; m; ++j) {
                    int nxt = last | (1 &lt;&lt; j);
                    ndp[nxt] = min(ndp[nxt], dp[last] + cost[i][j]);
                }
                int v = (1 &lt;&lt; m) - 1 - last;
                if (v &gt; 0) {
                    for (int j = v; j &gt; 0; j = v &amp; (j - 1)) {
                        int c = 0;
                        for (int k = 0; k &lt; m; ++k)
                            if (j &amp; (1 &lt;&lt; k))
                                c += cost[i][k];
                        int nxt = last | j;
                        ndp[nxt] = min(ndp[nxt], dp[last] + c);
                    }
                }
            }
            dp = move(ndp);
        }
        return dp.back();
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[LeetCode每日刷题]2020.09.20]]></title>
        <id>https://938650141.github.io/post/leetcode-mei-ri-shua-ti-20200920/</id>
        <link href="https://938650141.github.io/post/leetcode-mei-ri-shua-ti-20200920/">
        </link>
        <updated>2020-09-20T00:46:21.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<ol start="78">
<li>子集<br>
给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</li>
</ol>
</blockquote>
<p>直接循环0~2^n-1，根据位运算得子集放入答案数组中</p>
<pre><code>class Solution {
public:
    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {
        vector&lt;vector&lt;int&gt;&gt;ans;
        int n=nums.size();
        for(int i=0;i&lt;(1&lt;&lt;n);i++){
            vector&lt;int&gt;v;
            for(int j=0;j&lt;n;j++){
                if((i&gt;&gt;j)&amp;1) v.push_back(nums[j]);
            }
            ans.push_back(v);
        }
        return ans;
    }
};
</code></pre>
<blockquote>
<ol start="112">
<li>路径总和<br>
给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</li>
</ol>
</blockquote>
<p>递归到子节点记录路径和是否等于目标和，如果是将flag标记为true<br>
最后返回flag即可</p>
<pre><code>/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool flag;
    void dfs(TreeNode* o,int sum,int now){
        now+=o-&gt;val;
        if(o-&gt;left==nullptr &amp;&amp; o-&gt;right==nullptr) flag|=(now==sum);
        else{
            if(o-&gt;left!=nullptr) dfs(o-&gt;left,sum,now);
            if(o-&gt;right!=nullptr) dfs(o-&gt;right,sum,now);
        }
    }
    bool hasPathSum(TreeNode* root, int sum) {
        if(root==nullptr) return false;
        dfs(root,sum,0);
        return flag;
    }
};
</code></pre>
<blockquote>
<ol start="113">
<li>路径总和 II<br>
给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</li>
</ol>
</blockquote>
<p>上题一样的思路，只不过多维护一个路径数组，标记flag变成数组放入答案中。</p>
<pre><code>/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector&lt;vector&lt;int&gt;&gt; ans;
    void dfs(TreeNode* o,int sum,vector&lt;int&gt;now,int tmp){
        now.push_back(o-&gt;val);
        tmp+=o-&gt;val;
        if(o-&gt;left==nullptr &amp;&amp; o-&gt;right==nullptr &amp;&amp; tmp==sum){
            ans.push_back(now);
        }else{
            if(o-&gt;left!=nullptr) dfs(o-&gt;left,sum,now,tmp);
            if(o-&gt;right!=nullptr) dfs(o-&gt;right,sum,now,tmp);
        }
    }
    vector&lt;vector&lt;int&gt;&gt; pathSum(TreeNode* root, int sum) {
        if(root==nullptr) return ans;
        dfs(root,sum,{},0);
        return ans;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[LeetCode双周赛]第35场双周赛]]></title>
        <id>https://938650141.github.io/post/leetcode-shuang-zhou-sai-di-35-chang-shuang-zhou-sai/</id>
        <link href="https://938650141.github.io/post/leetcode-shuang-zhou-sai-di-35-chang-shuang-zhou-sai/">
        </link>
        <updated>2020-09-20T00:21:09.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<ol start="5503">
<li>所有奇数长度子数组的和<br>
给你一个正整数数组 arr ，请你计算所有可能的奇数长度子数组的和。<br>
子数组 定义为原数组中的一个连续子序列。<br>
请你返回 arr 中 所有奇数长度子数组的和 。</li>
</ol>
</blockquote>
<p>只需循环左端点的基础上循环右端点并维护左端点为起点右端点为重点的区间和，判断区间长度为奇书则加入到答案中。</p>
<pre><code>class Solution {
public:
    int sumOddLengthSubarrays(vector&lt;int&gt;&amp; arr) {
        int ans=0;
        for(int i=0;i&lt;arr.size();i++){
            int sum=0;
            for(int j=i;j&lt;arr.size();j++){
                sum+=arr[j];
                if((j-i)%2==0) ans+=sum;
            }
        }
        return ans;
    }
};
</code></pre>
<blockquote>
<ol start="5505">
<li>所有排列中的最大和<br>
有一个整数数组 nums ，和一个查询数组 requests ，其中 requests[i] = [start<sub>i</sub>, end<sub>i</sub>] 。第 i 个查询求 nums[start<sub>i</sub>] + nums[start<sub>i</sub> + 1] + ... + nums[end<sub>i</sub> - 1] + nums[end<sub>i</sub>] 的结果 ，start<sub>i</sub> 和 end<sub>i</sub> 数组索引都是 从 0 开始 的。<br>
你可以任意排列 nums 中的数字，请你返回所有查询结果之和的最大值。<br>
由于答案可能会很大，请你将它对 109 + 7 取余 后返回。</li>
</ol>
</blockquote>
<p>实际上是每次选取多个nums里的某个区间进行求和，如果从单个元素的贡献来看，如果某个位置被覆盖的次数最多，如果想要答案最大，则这个元素是nums里最大的数字。根据这个思路只需要统计每个位置被覆盖的次数，然后排序被统计的次数，再排序nums，这两者相同位置相乘求和即可。</p>
<pre><code>class Solution {
public:
    long long a[100005];
    int maxSumRangeQuery(vector&lt;int&gt;&amp; nums, vector&lt;vector&lt;int&gt;&gt;&amp; requests) {
        long long ans=0;
        int mod=(int)1e9+7;
        for(int i=0;i&lt;requests.size();i++) a[requests[i][0]+1]++,a[requests[i][1]+2]--;
        int n=nums.size();
        for(int i=1;i&lt;=n;i++) a[i]+=a[i-1];
        vector&lt;long long&gt;v;
        sort(nums.begin(),nums.end());
        for(int i=1;i&lt;=n;i++) v.push_back(a[i]);
        sort(v.begin(),v.end());
        for(int i=0;i&lt;n;i++) ans=(ans+v[i]*(nums[i]))%mod;
        return ans;
    }
};
</code></pre>
<blockquote>
<ol start="5504">
<li>使数组和能被 P 整除<br>
给你一个正整数数组 nums，请你移除 最短 子数组（可以为 空），使得剩余元素的 和 能被 p 整除。 不允许 将整个数组都移除。<br>
请你返回你需要移除的最短子数组，如果无法满足题目要求，返回 -1 。<br>
子数组 定义为原数组中连续的一组元素。</li>
</ol>
</blockquote>
<p>如果要让数组和能被P整除，反过来就是找一段子区间的和是(数组和%p)</p>
<pre><code>class Solution {
public:
    unordered_map&lt;int,int&gt;mp;
    long long sum[100005];
    int minSubarray(vector&lt;int&gt;&amp; nums, int p) {
        long long a=0;
        for(int i=0;i&lt;nums.size();i++) sum[i+1]=nums[i],a+=nums[i];
        a%=p;
        if(a==0) return 0;
        int n=nums.size();
        int ans=0x3f3f3f3f;
        mp[0]=0;
        for(int i=1;i&lt;=n;i++){
            sum[i]+=sum[i-1];
            sum[i]%=p;
            if(mp.find((sum[i]-a+p)%p)!=mp.end()){
                ans=min(ans,i-mp[(sum[i]-a+p)%p]);
            }
            mp[sum[i]]=i;
        }
        return ((ans==0x3f3f3f3f)||(ans==n))?-1:ans;
    }
};
</code></pre>
<blockquote>
<ol start="5506">
<li>奇怪的打印机 II<br>
给你一个奇怪的打印机，它有如下两个特殊的打印规则：<br>
每一次操作时，打印机会用同一种颜色打印一个矩形的形状，每次打印会覆盖矩形对应格子里原本的颜色。<br>
一旦矩形根据上面的规则使用了一种颜色，那么 相同的颜色不能再被使用 。<br>
给你一个初始没有颜色的 m x n 的矩形 targetGrid ，其中 targetGrid[row][col] 是位置 (row, col) 的颜色。<br>
如果你能按照上述规则打印出矩形 targetGrid ，请你返回 true ，否则返回 false 。</li>
</ol>
</blockquote>
<p>我的想法是每次找到一个矩形，然后将其全部变成通用颜色，直到找不到为止，如果最后全部方块都是通用颜色则说明true否则false。</p>
<pre><code>class Solution {
public:
    int mnh[100],mxh[100],mnl[100],mxl[100];
    int pic[105][105];
    int vis[105];
    bool isPrintable(vector&lt;vector&lt;int&gt;&gt;&amp; targetGrid) {
        for(int i=1;i&lt;=60;i++) mnh[i]=0x3f3f3f3f,mnl[i]=0x3f3f3f3f;
        for(int i=1;i&lt;=60;i++) mxh[i]=0xcfcfcfcf,mxl[i]=0xcfcfcfcf;
        for(int i=0;i&lt;targetGrid.size();i++){
            for(int j=0;j&lt;targetGrid[i].size();j++){
                int now=targetGrid[i][j];
                mnh[now]=min(mnh[now],i+1);
                mxh[now]=max(mxh[now],i+1);
                mnl[now]=min(mnl[now],j+1);
                mxl[now]=max(mxl[now],j+1);
                pic[i+1][j+1]=targetGrid[i][j];
            }
        }
        bool flag=true;
        while(flag){
            flag=false;
            for(int i=1;i&lt;=60;i++){
                bool isSq=true;
                if(mxh[i]-mnh[i]&lt;0 || mxl[i]-mnl[i]&lt;0) isSq=false;
                for(int j=mnh[i];j&lt;=mxh[i];j++){
                    for(int k=mnl[i];k&lt;=mxl[i];k++){
                        if(pic[j][k]!=i &amp;&amp; pic[j][k]!=100 ) isSq=false;
                    }
                }
                if(isSq){
                    flag=true;
                    for(int j=mnh[i];j&lt;=mxh[i];j++){
                        for(int k=mnl[i];k&lt;=mxl[i];k++){
                            pic[j][k]=100;
                        }
                    }
                    mnh[i]=0x3f3f3f3f,mnl[i]=0x3f3f3f3f;
                    mxh[i]=0xcfcfcfcf,mxl[i]=0xcfcfcfcf;
                }
            }
        }
        int n=(int)targetGrid.size();
        int m=(int)targetGrid[0].size();
        bool ok=true;
        for(int i=1;i&lt;=n;i++)
            for(int j=1;j&lt;=m;j++)
                if(pic[i][j]!=100) ok=false;
        return ok;
    }
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[HackerRank]Absolute Permutation题解]]></title>
        <id>https://938650141.github.io/post/hackerrankabsolute-permutation-ti-jie/</id>
        <link href="https://938650141.github.io/post/hackerrankabsolute-permutation-ti-jie/">
        </link>
        <updated>2020-09-19T14:03:39.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>给定n和k询问是否存在一个长度为n的不重复数组与从1到n的序列相同位置一一对应元素的绝对值均为k</p>
</blockquote>
<p>本题目参考GeeksforGeeks题解*<br>
当k为0是显然只需要输出从1到n的序列即可<br>
更进一步的观察可以相当，n一定是2k的倍数，这样才能满足i和i+k元素的互换，这样i位置是i+k，i+k位置是i，满足了题目的要求。<br>
于是只需要判断好是否满足条件直接模拟一下输出答案即可</p>
<pre><code>#include &lt;bits/stdc++.h&gt;

using namespace std;

vector&lt;string&gt; split_string(string);

// Complete the absolutePermutation function below.
vector&lt;int&gt; absolutePermutation(int n, int k) {
    vector&lt;int&gt;ans;
    if(k==0){
        for(int i=1;i&lt;=n;i++) ans.push_back(i);
        return ans;
    }
    if(n%(k*2)!=0){
        ans.push_back(-1);
        return ans;
    }
    else{
        for(int i=1;i&lt;=n;i++){
            if(((i-1)/k)%2==0) ans.push_back(i+k);
            else ans.push_back(i-k);
        }
        return ans;
    }
    return ans;
}

int main()
{
    ofstream fout(getenv(&quot;OUTPUT_PATH&quot;));

    int t;
    cin &gt;&gt; t;
    cin.ignore(numeric_limits&lt;streamsize&gt;::max(), '\n');

    for (int t_itr = 0; t_itr &lt; t; t_itr++) {
        string nk_temp;
        getline(cin, nk_temp);

        vector&lt;string&gt; nk = split_string(nk_temp);

        int n = stoi(nk[0]);

        int k = stoi(nk[1]);

        vector&lt;int&gt; result = absolutePermutation(n, k);

        for (int i = 0; i &lt; result.size(); i++) {
            fout &lt;&lt; result[i];

            if (i != result.size() - 1) {
                fout &lt;&lt; &quot; &quot;;
            }
        }

        fout &lt;&lt; &quot;\n&quot;;
    }

    fout.close();

    return 0;
}

vector&lt;string&gt; split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &amp;x, const char &amp;y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector&lt;string&gt; splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}

</code></pre>
<hr>
<p>*https://www.geeksforgeeks.org/k-difference-permutation/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[LeetCode每日刷题]2020.09.19]]></title>
        <id>https://938650141.github.io/post/leetcode-mei-ri-shua-ti-20200919/</id>
        <link href="https://938650141.github.io/post/leetcode-mei-ri-shua-ti-20200919/">
        </link>
        <updated>2020-09-19T02:35:45.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>No.404 左叶子之和<br>
计算给定二叉树的所有左叶子之和。</p>
</blockquote>
<p>递归一遍，如果左右儿子不存在且当前结点是父亲节点的左儿子就加上当前结点的数字，最后返回答案即可。</p>
<pre><code>/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int ans=0;
    void dfs(TreeNode* o,int w){
        if(o-&gt;left==nullptr &amp;&amp; o-&gt;right==nullptr){
            if(w==1) ans+=o-&gt;val;
        }else{
            if(o-&gt;left!=nullptr) dfs(o-&gt;left,1);
            if(o-&gt;right!=nullptr) dfs(o-&gt;right,0);
        }
    }
    int sumOfLeftLeaves(TreeNode* root) {
        if(root==nullptr) return 0;
        dfs(root,-1);
        return ans;
    }
};
</code></pre>
<blockquote>
<p>No.2 两数相加<br>
给定两个链表代表两个数，求两个数求和后的链表</p>
</blockquote>
<pre><code>/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode p=l1,q=l2,cur=dummyHead;
        int carry=0;
        while(p!=null || q!=null){
            int x=(p!=null)?p.val:0;
            int y=(q!=null)?q.val:0;
            int sum=carry+x+y;
            carry=sum/10;
            cur.next=new ListNode(sum%10);
            cur=cur.next;
            if(p!=null) p=p.next;
            if(q!=null) q=q.next;
        }
        if(carry!=0) cur.next=new ListNode(carry);
        return dummyHead.next;
    }
}
</code></pre>
<blockquote>
<p>No.150 逆波兰表达式求值</p>
</blockquote>
<p>栈的应用</p>
<pre><code>class Solution {
    public int evalRPN(String[] tokens) {
        Stack&lt;Integer&gt; s=new Stack&lt;&gt;();
        Integer a,b;
        for(int i=0;i&lt;tokens.length;i++){
            if(tokens[i].equals(&quot;+&quot;)){
                a=s.pop();
                b=s.pop();
                s.push(a+b);
            }else if(tokens[i].equals(&quot;-&quot;)){
                a=s.pop();
                b=s.pop();
                s.push(b-a);
            }else if(tokens[i].equals(&quot;*&quot;)){
                a=s.pop();
                b=s.pop();
                s.push(a*b);
            }else if(tokens[i].equals(&quot;/&quot;)){
                a=s.pop();
                b=s.pop();
                s.push(b/a);
            }else{
                s.push(Integer.valueOf(tokens[i]));
            }
        }
        return s.pop();
    }
}
</code></pre>
]]></content>
    </entry>
</feed>